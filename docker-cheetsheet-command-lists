

# Docker Cheetsheet or Docker Commands list

## Basics  Docker Commands
check the docker version


docker --version


Build an image from a Dockerfile the current directory


docker build -t <image_name> .


Build an image from a Dockerfile the current directory without the cache


docker build -t <image_name> . -no-cache



## Docker Images 
List local docker Images


docker images ls


Delete docker Images

docker rmi <image_name>


Clean up docker containers, images, columns and networks 


docker system prune


Remove all unused images


docker image prune



# DOCKER HUB



# DOCKER 
List all the current running docker container


docker ps


List all docker running container

docker ps -a 


-a = all docker container (running and stopped)

start docker daemon


docker -d


Docker Help

docker --help


Can also use -help for all subcommands

 How ?

Display Docker info


docker info

start the docker container 


docker start <conatiner_name or id>


stop the docker container

docker stop <container_name or id>



docker run -d --name <container_name> -p <host_port>:<container_port> -v <host_path>:<container_path> <image_name>



-d = detached mode (runs in backgroud)
--name <conatiner_name> = give your container a custom name
-p <host_port>:<conatiner_port> =  maps ports = host:container =maps a port on your host machince to a port inside the conatiner
-it = interactive +terminal (used for debugging)
-v <host_path>:<container_path> = mouth volume (persistent data) = mouth a host folder into conatiner

Example:

docker run -d --name myweb -p 8080:80 -v /data:/usr/share/nginx/html nginx


# Logs and Debug

docker logs <container> → Show logs

docker logs -f <container> → Follow live logs.

## Show last 100 lines only
docker logs --tail 100 myweb

## Follow logs + limit last 50 lines
docker logs -f --tail 50 myweb

## Grep something from logs
docker logs myweb | grep "error"

## Follow logs + grep (live)
docker logs -f myweb | grep "database"


docker exec -it <container> bash → Get inside running container.

docker inspect <container> → Detailed info (JSON).

docker stats → Show CPU/memory usage.

## Tagging an Image

docker tag <local_image>:<tag> <dockerhub_username>/<repo_name>:<tag>

Options:
docker tag → Command to give your image a new name/tag.

<local_image>:<tag> → Your local image name and version (e.g., myapp:v1).

<dockerhub_username> → Your Docker Hub username.

<repo_name> → Repository name in Docker Hub.

<tag> → Version or label (e.g., v1, latest).

Example: 
docker tag myapp:v1 manjunathb/myapp:v1

Here:
myapp:v1 = local image.
manjunathb/myapp:v1 = Docker Hub repo + tag.

## Login to Docker Hub

docker login

Prompts for username and password.
Required before pushing images.

## Push Image to Docker Hub

docker push <dockerhub_username>/<repo_name>:<tag>

docker push → Uploads image to Docker Hub.
<dockerhub_username> → Must match your Docker Hub account.
<repo_name>:<tag> → Image name and tag.


Example:
docker push manjunathb/myapp:v1

## Pull Image from Docker Hub
docker pull <dockerhub_username>/<repo_name>:<tag>

Optons: 
docker pull → Downloads image from Docker Hub.

If <tag> is not given, Docker defaults to latest.

Example:
With Tag
docker pull manjunathb/myapp:v1

Default Latest:

docker pull nginx


## Run Pulled Image
docker run -d --name webapp -p 8080:80 manjunathb/myapp:v1


## Flow Summary

Build → docker build -t myapp:v1 .
Tag → docker tag myapp:v1 manjunathb/myapp:v1
Login → docker login
Push → docker push manjunathb/myapp:v1
Pull → docker pull manjunathb/myapp:v1
Run → docker run -d -p 8080:80 manjunathb/myapp:v1



Copy file from host to container

docker cp config.conf my-nginx:/etc/nginx/conf.d/


Copy file from container to host

docker cp my-nginx:/var/log/nginx/access.log ./access.log

